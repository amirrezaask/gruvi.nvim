vim.api.nvim_set_hl(0, 'DiagnosticVirtualTextError', { bg = 'none', fg = 'none', link = "DiagnosticError" })
vim.api.nvim_set_hl(0, 'telescopematching', { bg = 'none', fg = '#E89155' })
vim.api.nvim_set_hl(0, 'Debug', { bg = 'none', fg = 'none', link = "Special" })
vim.api.nvim_set_hl(0, 'DiagnosticVirtualTextWarn', { bg = 'none', fg = 'none', link = "DiagnosticWarn" })
vim.api.nvim_set_hl(0, 'DiagnosticVirtualTextInfo', { bg = 'none', fg = 'none', link = "DiagnosticInfo" })
vim.api.nvim_set_hl(0, '@constant', { bg = 'none', fg = '#DE935F' })
vim.api.nvim_set_hl(0, 'DiagnosticVirtualLinesHint', { bg = 'none', fg = 'none', link = "DiagnosticHint" })
vim.api.nvim_set_hl(0, 'DiagnosticVirtualLinesError', { bg = 'none', fg = 'none', link = "DiagnosticError" })
vim.api.nvim_set_hl(0, 'DiagnosticVirtualLinesWarn', { bg = 'none', fg = 'none', link = "DiagnosticWarn" })
vim.api.nvim_set_hl(0, 'DiagnosticVirtualLinesInfo', { bg = 'none', fg = 'none', link = "DiagnosticInfo" })
vim.api.nvim_set_hl(0, '@lsp.type.typeParameter', { bg = 'none', fg = 'none', link = "@type.definition" })
vim.api.nvim_set_hl(0, 'DiagnosticUnderlineError', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, '@lsp.type.variable', { bg = 'none', fg = 'none', link = "@variable" })
vim.api.nvim_set_hl(0, '@property', { bg = 'none', fg = '#81A2BE' })
vim.api.nvim_set_hl(0, 'DiagnosticFloatingHint', { bg = 'none', fg = 'none', link = "DiagnosticHint" })
vim.api.nvim_set_hl(0, 'DiagnosticFloatingError', { bg = 'none', fg = 'none', link = "DiagnosticError" })
vim.api.nvim_set_hl(0, 'DiagnosticFloatingWarn', { bg = 'none', fg = 'none', link = "DiagnosticWarn" })
vim.api.nvim_set_hl(0, 'DiagnosticFloatingInfo', { bg = 'none', fg = 'none', link = "DiagnosticInfo" })
vim.api.nvim_set_hl(0, 'DiagnosticSignHint', { bg = 'none', fg = 'none', link = "DiagnosticHint" })
vim.api.nvim_set_hl(0, 'PmenuExtra', { bg = 'none', fg = 'none', link = "Pmenu" })
vim.api.nvim_set_hl(0, 'DiagnosticSignWarn', { bg = 'none', fg = 'none', link = "DiagnosticWarn" })
vim.api.nvim_set_hl(0, 'DiagnosticSignInfo', { bg = 'none', fg = 'none', link = "DiagnosticInfo" })
vim.api.nvim_set_hl(0, 'NvimAssignment', { bg = 'none', fg = 'none', link = "Operator" })
vim.api.nvim_set_hl(0, 'PmenuKind', { bg = 'none', fg = 'none', link = "Pmenu" })
vim.api.nvim_set_hl(0, 'NvimAugmentedAssignment', { bg = 'none', fg = 'none', link = "NvimAssignment" })
vim.api.nvim_set_hl(0, 'NvimAssignmentWithAddition', { bg = 'none', fg = 'none', link = "NvimAugmentedAssignment" })
vim.api.nvim_set_hl(0, 'NvimAssignmentWithSubtraction', { bg = 'none', fg = 'none', link = "NvimAugmentedAssignment" })
vim.api.nvim_set_hl(0, 'NvimAssignmentWithConcatenation', { bg = 'none', fg = 'none', link = "NvimAugmentedAssignment" })
vim.api.nvim_set_hl(0, 'NvimOperator', { bg = 'none', fg = 'none', link = "Operator" })
vim.api.nvim_set_hl(0, 'Pmenu', { bg = '#373B41', fg = '#B4B7B4' })
vim.api.nvim_set_hl(0, 'NvimUnaryPlus', { bg = 'none', fg = 'none', link = "NvimUnaryOperator" })
vim.api.nvim_set_hl(0, 'NvimUnaryMinus', { bg = 'none', fg = 'none', link = "NvimUnaryOperator" })
vim.api.nvim_set_hl(0, 'PmenuSel', { bg = '#FBFEAD', fg = '#111111' })
vim.api.nvim_set_hl(0, 'NvimBinaryOperator', { bg = 'none', fg = 'none', link = "NvimOperator" })
vim.api.nvim_set_hl(0, 'NvimComparison', { bg = 'none', fg = 'none', link = "NvimBinaryOperator" })
vim.api.nvim_set_hl(0, 'NvimComparisonModifier', { bg = 'none', fg = 'none', link = "NvimComparison" })
vim.api.nvim_set_hl(0, 'NvimBinaryPlus', { bg = 'none', fg = 'none', link = "NvimBinaryOperator" })
vim.api.nvim_set_hl(0, 'Visual', { bg = '#5F89AD', fg = 'none' })
vim.api.nvim_set_hl(0, 'NvimConcat', { bg = 'none', fg = 'none', link = "NvimBinaryOperator" })
vim.api.nvim_set_hl(0, 'NvimConcatOrSubscript', { bg = 'none', fg = 'none', link = "NvimConcat" })
vim.api.nvim_set_hl(0, 'NvimOr', { bg = 'none', fg = 'none', link = "NvimBinaryOperator" })
vim.api.nvim_set_hl(0, 'LspSignatureActiveParameter', { bg = 'none', fg = 'none', link = "Visual" })
vim.api.nvim_set_hl(0, 'NvimMultiplication', { bg = 'none', fg = 'none', link = "NvimBinaryOperator" })
vim.api.nvim_set_hl(0, 'NvimDivision', { bg = 'none', fg = 'none', link = "NvimBinaryOperator" })
vim.api.nvim_set_hl(0, 'NvimMod', { bg = 'none', fg = 'none', link = "NvimBinaryOperator" })
vim.api.nvim_set_hl(0, 'NvimTernary', { bg = 'none', fg = 'none', link = "NvimOperator" })
vim.api.nvim_set_hl(0, 'NvimTernaryColon', { bg = 'none', fg = 'none', link = "NvimTernary" })
vim.api.nvim_set_hl(0, 'NvimParenthesis', { bg = 'none', fg = 'none', link = "Delimiter" })
vim.api.nvim_set_hl(0, 'NvimLambda', { bg = 'none', fg = 'none', link = "NvimParenthesis" })
vim.api.nvim_set_hl(0, 'NvimNestingParenthesis', { bg = 'none', fg = 'none', link = "NvimParenthesis" })
vim.api.nvim_set_hl(0, 'NvimCallingParenthesis', { bg = 'none', fg = 'none', link = "NvimParenthesis" })
vim.api.nvim_set_hl(0, 'NvimSubscript', { bg = 'none', fg = 'none', link = "NvimParenthesis" })
vim.api.nvim_set_hl(0, 'NvimSubscriptBracket', { bg = 'none', fg = 'none', link = "NvimSubscript" })
vim.api.nvim_set_hl(0, 'Normal', { bg = '#282c34', fg = '#e0e0e0' })
vim.api.nvim_set_hl(0, 'NvimCurly', { bg = 'none', fg = 'none', link = "NvimSubscript" })
vim.api.nvim_set_hl(0, 'NvimContainer', { bg = 'none', fg = 'none', link = "NvimParenthesis" })
vim.api.nvim_set_hl(0, 'NvimDict', { bg = 'none', fg = 'none', link = "NvimContainer" })
vim.api.nvim_set_hl(0, 'NvimList', { bg = 'none', fg = 'none', link = "NvimContainer" })
vim.api.nvim_set_hl(0, 'CursorLine', { bg = '#3e4451', fg = 'none' })
vim.api.nvim_set_hl(0, 'NvimIdentifierScope', { bg = 'none', fg = 'none', link = "NvimIdentifier" })
vim.api.nvim_set_hl(0, 'NvimIdentifierScopeDelimiter', { bg = 'none', fg = 'none', link = "NvimIdentifier" })
vim.api.nvim_set_hl(0, 'NvimIdentifierName', { bg = 'none', fg = 'none', link = "NvimIdentifier" })
vim.api.nvim_set_hl(0, 'NvimIdentifierKey', { bg = 'none', fg = 'none', link = "NvimIdentifier" })
vim.api.nvim_set_hl(0, 'NvimColon', { bg = 'none', fg = 'none', link = "Delimiter" })
vim.api.nvim_set_hl(0, 'NvimComma', { bg = 'none', fg = 'none', link = "Delimiter" })
vim.api.nvim_set_hl(0, 'NvimArrow', { bg = 'none', fg = 'none', link = "Delimiter" })
vim.api.nvim_set_hl(0, 'NvimRegister', { bg = 'none', fg = 'none', link = "SpecialChar" })
vim.api.nvim_set_hl(0, 'NvimNumber', { bg = 'none', fg = 'none', link = "Number" })
vim.api.nvim_set_hl(0, 'NvimFloat', { bg = 'none', fg = 'none', link = "NvimNumber" })
vim.api.nvim_set_hl(0, 'NvimNumberPrefix', { bg = 'none', fg = 'none', link = "Type" })
vim.api.nvim_set_hl(0, 'NvimOptionSigil', { bg = 'none', fg = 'none', link = "Type" })
vim.api.nvim_set_hl(0, 'NvimOptionName', { bg = 'none', fg = 'none', link = "NvimIdentifier" })
vim.api.nvim_set_hl(0, 'NvimOptionScope', { bg = 'none', fg = 'none', link = "NvimIdentifierScope" })
vim.api.nvim_set_hl(0, 'Cursor', { bg = '#E0E0E0', fg = '#111111' })
vim.api.nvim_set_hl(0, 'LspReferenceText', { bg = 'none', fg = 'none', link = "Visual" })
vim.api.nvim_set_hl(0, 'LspReferenceRead', { bg = '#2B2B2B', fg = 'none' })
vim.api.nvim_set_hl(0, 'LspReferenceWrite', { bg = '#2B2B2B', fg = 'none' })
vim.api.nvim_set_hl(0, 'CursorLineNr', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, 'NvimStringQuote', { bg = 'none', fg = 'none', link = "NvimString" })
vim.api.nvim_set_hl(0, 'IncSearch', { bg = 'none', fg = 'none', link = "CurSearch" })
vim.api.nvim_set_hl(0, 'NvimSingleQuote', { bg = 'none', fg = 'none', link = "NvimStringQuote" })
vim.api.nvim_set_hl(0, 'NvimSingleQuotedBody', { bg = 'none', fg = 'none', link = "NvimStringBody" })
vim.api.nvim_set_hl(0, 'NvimSingleQuotedQuote', { bg = 'none', fg = 'none', link = "NvimStringSpecial" })
vim.api.nvim_set_hl(0, 'NvimDoubleQuote', { bg = 'none', fg = 'none', link = "NvimStringQuote" })
vim.api.nvim_set_hl(0, 'NvimDoubleQuotedBody', { bg = 'none', fg = 'none', link = "NvimStringBody" })
vim.api.nvim_set_hl(0, 'NvimDoubleQuotedEscape', { bg = 'none', fg = 'none', link = "NvimStringSpecial" })
vim.api.nvim_set_hl(0, 'PmenuSbar', { bg = '#111111', fg = 'none' })
vim.api.nvim_set_hl(0, 'NvimSingleQuotedUnknownEscape', { bg = 'none', fg = 'none', link = "NvimInternalError" })
vim.api.nvim_set_hl(0, 'NvimSpacing', { bg = 'none', fg = 'none', link = "Normal" })
vim.api.nvim_set_hl(0, 'PmenuThumb', { bg = '#B4B7B4', fg = 'none' })
vim.api.nvim_set_hl(0, 'NvimInvalid', { bg = 'none', fg = 'none', link = "Error" })
vim.api.nvim_set_hl(0, 'NvimInvalidAssignment', { bg = 'none', fg = 'none', link = "NvimInvalid" })
vim.api.nvim_set_hl(0, 'Directory', { bg = 'none', fg = '#E7B089' })
vim.api.nvim_set_hl(0, 'NvimInvalidAugmentedAssignment', { bg = 'none', fg = 'none', link = "NvimInvalidAssignment" })
vim.api.nvim_set_hl(0, 'NvimInvalidAssignmentWithAddition',
    { bg = 'none', fg = 'none', link = "NvimInvalidAugmentedAssignment" })
vim.api.nvim_set_hl(0, 'Comment', { bg = 'none', fg = '#B0B1B0' })
vim.api.nvim_set_hl(0, 'NvimInvalidAssignmentWithConcatenation',
    { bg = 'none', fg = 'none', link = "NvimInvalidAugmentedAssignment" })
vim.api.nvim_set_hl(0, 'NvimInvalidOperator', { bg = 'none', fg = 'none', link = "NvimInvalid" })
vim.api.nvim_set_hl(0, 'NvimInvalidUnaryOperator', { bg = 'none', fg = 'none', link = "NvimInvalidOperator" })
vim.api.nvim_set_hl(0, 'NvimInvalidUnaryPlus', { bg = 'none', fg = 'none', link = "NvimInvalidUnaryOperator" })
vim.api.nvim_set_hl(0, 'NvimInvalidUnaryMinus', { bg = 'none', fg = 'none', link = "NvimInvalidUnaryOperator" })
vim.api.nvim_set_hl(0, 'NvimInvalidNot', { bg = 'none', fg = 'none', link = "NvimInvalidUnaryOperator" })
vim.api.nvim_set_hl(0, 'NvimInvalidBinaryOperator', { bg = 'none', fg = 'none', link = "NvimInvalidOperator" })
vim.api.nvim_set_hl(0, 'NvimInvalidComparison', { bg = 'none', fg = 'none', link = "NvimInvalidBinaryOperator" })
vim.api.nvim_set_hl(0, 'NvimInvalidComparisonModifier', { bg = 'none', fg = 'none', link = "NvimInvalidComparison" })
vim.api.nvim_set_hl(0, 'NvimInvalidBinaryPlus', { bg = 'none', fg = 'none', link = "NvimInvalidBinaryOperator" })
vim.api.nvim_set_hl(0, 'NvimInvalidBinaryMinus', { bg = 'none', fg = 'none', link = "NvimInvalidBinaryOperator" })
vim.api.nvim_set_hl(0, 'NvimInvalidConcat', { bg = 'none', fg = 'none', link = "NvimInvalidBinaryOperator" })
vim.api.nvim_set_hl(0, 'NvimInvalidConcatOrSubscript', { bg = 'none', fg = 'none', link = "NvimInvalidConcat" })
vim.api.nvim_set_hl(0, 'NvimInvalidOr', { bg = 'none', fg = 'none', link = "NvimInvalidBinaryOperator" })
vim.api.nvim_set_hl(0, 'NvimInvalidAnd', { bg = 'none', fg = 'none', link = "NvimInvalidBinaryOperator" })
vim.api.nvim_set_hl(0, 'NvimInvalidMultiplication', { bg = 'none', fg = 'none', link = "NvimInvalidBinaryOperator" })
vim.api.nvim_set_hl(0, 'NvimInvalidDivision', { bg = 'none', fg = 'none', link = "NvimInvalidBinaryOperator" })
vim.api.nvim_set_hl(0, 'NvimInvalidMod', { bg = 'none', fg = 'none', link = "NvimInvalidBinaryOperator" })
vim.api.nvim_set_hl(0, 'NvimInvalidTernary', { bg = 'none', fg = 'none', link = "NvimInvalidOperator" })
vim.api.nvim_set_hl(0, 'NvimInvalidTernaryColon', { bg = 'none', fg = 'none', link = "NvimInvalidTernary" })
vim.api.nvim_set_hl(0, 'NvimInvalidDelimiter', { bg = 'none', fg = 'none', link = "NvimInvalid" })
vim.api.nvim_set_hl(0, 'NvimInvalidParenthesis', { bg = 'none', fg = 'none', link = "NvimInvalidDelimiter" })
vim.api.nvim_set_hl(0, 'NvimInvalidLambda', { bg = 'none', fg = 'none', link = "NvimInvalidParenthesis" })
vim.api.nvim_set_hl(0, 'NvimInvalidNestingParenthesis', { bg = 'none', fg = 'none', link = "NvimInvalidParenthesis" })
vim.api.nvim_set_hl(0, 'NvimInvalidCallingParenthesis', { bg = 'none', fg = 'none', link = "NvimInvalidParenthesis" })
vim.api.nvim_set_hl(0, 'NvimInvalidSubscript', { bg = 'none', fg = 'none', link = "NvimInvalidParenthesis" })
vim.api.nvim_set_hl(0, 'NvimInvalidSubscriptBracket', { bg = 'none', fg = 'none', link = "NvimInvalidSubscript" })
vim.api.nvim_set_hl(0, 'NvimInvalidSubscriptColon', { bg = 'none', fg = 'none', link = "NvimInvalidSubscript" })
vim.api.nvim_set_hl(0, 'NvimInvalidCurly', { bg = 'none', fg = 'none', link = "NvimInvalidSubscript" })
vim.api.nvim_set_hl(0, 'NvimInvalidContainer', { bg = 'none', fg = 'none', link = "NvimInvalidParenthesis" })
vim.api.nvim_set_hl(0, 'NvimInvalidDict', { bg = 'none', fg = 'none', link = "NvimInvalidContainer" })
vim.api.nvim_set_hl(0, 'NvimInvalidList', { bg = 'none', fg = 'none', link = "NvimInvalidContainer" })
vim.api.nvim_set_hl(0, 'NvimInvalidValue', { bg = 'none', fg = 'none', link = "NvimInvalid" })
vim.api.nvim_set_hl(0, 'NvimInvalidIdentifier', { bg = 'none', fg = 'none', link = "NvimInvalidValue" })
vim.api.nvim_set_hl(0, 'NvimInvalidIdentifierScope', { bg = 'none', fg = 'none', link = "NvimInvalidIdentifier" })
vim.api.nvim_set_hl(0, 'NvimInvalidIdentifierScopeDelimiter',
    { bg = 'none', fg = 'none', link = "NvimInvalidIdentifier" })
vim.api.nvim_set_hl(0, 'NvimInvalidIdentifierName', { bg = 'none', fg = 'none', link = "NvimInvalidIdentifier" })
vim.api.nvim_set_hl(0, 'NvimInvalidIdentifierKey', { bg = 'none', fg = 'none', link = "NvimInvalidIdentifier" })
vim.api.nvim_set_hl(0, 'NvimInvalidColon', { bg = 'none', fg = 'none', link = "NvimInvalidDelimiter" })
vim.api.nvim_set_hl(0, 'NvimInvalidComma', { bg = 'none', fg = 'none', link = "NvimInvalidDelimiter" })
vim.api.nvim_set_hl(0, 'NvimInvalidArrow', { bg = 'none', fg = 'none', link = "NvimInvalidDelimiter" })
vim.api.nvim_set_hl(0, 'NvimInvalidRegister', { bg = 'none', fg = 'none', link = "NvimInvalidValue" })
vim.api.nvim_set_hl(0, 'NvimInvalidNumber', { bg = 'none', fg = 'none', link = "NvimInvalidValue" })
vim.api.nvim_set_hl(0, 'NvimInvalidFloat', { bg = 'none', fg = 'none', link = "NvimInvalidNumber" })
vim.api.nvim_set_hl(0, 'NvimInvalidNumberPrefix', { bg = 'none', fg = 'none', link = "NvimInvalidNumber" })
vim.api.nvim_set_hl(0, 'NvimInvalidOptionSigil', { bg = 'none', fg = 'none', link = "NvimInvalidIdentifier" })
vim.api.nvim_set_hl(0, 'NvimInvalidOptionName', { bg = 'none', fg = 'none', link = "NvimInvalidIdentifier" })
vim.api.nvim_set_hl(0, 'NvimInvalidOptionScope', { bg = 'none', fg = 'none', link = "NvimInvalidIdentifierScope" })
vim.api.nvim_set_hl(0, 'SnippetTabstop', { bg = 'none', fg = 'none', link = "Visual" })
vim.api.nvim_set_hl(0, 'NvimInvalidEnvironmentSigil', { bg = 'none', fg = 'none', link = "NvimInvalidOptionSigil" })
vim.api.nvim_set_hl(0, 'NvimInvalidEnvironmentName', { bg = 'none', fg = 'none', link = "NvimInvalidIdentifier" })
vim.api.nvim_set_hl(0, 'NvimInvalidString', { bg = 'none', fg = 'none', link = "NvimInvalidValue" })
vim.api.nvim_set_hl(0, 'NvimInvalidStringBody', { bg = 'none', fg = 'none', link = "NvimStringBody" })
vim.api.nvim_set_hl(0, 'NvimInvalidStringQuote', { bg = 'none', fg = 'none', link = "NvimInvalidString" })
vim.api.nvim_set_hl(0, 'NvimInvalidStringSpecial', { bg = 'none', fg = 'none', link = "NvimStringSpecial" })
vim.api.nvim_set_hl(0, 'NvimInvalidSingleQuote', { bg = 'none', fg = 'none', link = "NvimInvalidStringQuote" })
vim.api.nvim_set_hl(0, 'NvimInvalidSingleQuotedBody', { bg = 'none', fg = 'none', link = "NvimInvalidStringBody" })
vim.api.nvim_set_hl(0, 'NvimInvalidSingleQuotedQuote', { bg = 'none', fg = 'none', link = "NvimInvalidStringSpecial" })
vim.api.nvim_set_hl(0, 'NvimInvalidDoubleQuote', { bg = 'none', fg = 'none', link = "NvimInvalidStringQuote" })
vim.api.nvim_set_hl(0, 'NvimInvalidDoubleQuotedBody', { bg = 'none', fg = 'none', link = "NvimInvalidStringBody" })
vim.api.nvim_set_hl(0, 'NvimInvalidDoubleQuotedEscape', { bg = 'none', fg = 'none', link = "NvimInvalidStringSpecial" })
vim.api.nvim_set_hl(0, 'NvimInvalidDoubleQuotedUnknownEscape', { bg = 'none', fg = 'none', link = "NvimInvalidValue" })
vim.api.nvim_set_hl(0, 'NvimInvalidFigureBrace', { bg = 'none', fg = 'none', link = "NvimInvalidDelimiter" })
vim.api.nvim_set_hl(0, 'NvimInvalidSpacing', { bg = 'none', fg = 'none', link = "ErrorMsg" })
vim.api.nvim_set_hl(0, 'NvimDoubleQuotedUnknownEscape', { bg = 'none', fg = 'none', link = "NvimInvalidValue" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindText', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindMethod', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindFunction', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindConstructor', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindField', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindVariable', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindClass', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindInterface', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindModule', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindProperty', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindUnit', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindValue', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindEnum', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindKeyword', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindSnippet', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindColor', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindFile', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindReference', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'replacemode', { bg = '#F8FE7A', fg = '#FFFFFF' })
vim.api.nvim_set_hl(0, 'BlinkCmpKindEnumMember', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindConstant', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindStruct', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindEvent', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindOperator', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindTypeParameter', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'FzfLuaScrollBorderBackCompat', { bg = '#E0E0E0', fg = '#111111' })
vim.api.nvim_set_hl(0, 'terminalmode', { bg = '#698B69', fg = '#FFFFFF' })
vim.api.nvim_set_hl(0, 'BlinkCmpSignatureHelpActiveParameter',
    { bg = 'none', fg = 'none', link = "LspSignatureActiveParameter" })
vim.api.nvim_set_hl(0, 'user1', { bg = '#F8FE7A', fg = '#FFFFFF' })
vim.api.nvim_set_hl(0, 'BlinkCmpSignatureHelpBorder', { bg = 'none', fg = 'none', link = "NormalFloat" })
vim.api.nvim_set_hl(0, 'user2', { bg = '#CC6666', fg = '#FFFFFF' })
vim.api.nvim_set_hl(0, 'BlinkCmpSignatureHelp', { bg = 'none', fg = 'none', link = "NormalFloat" })
vim.api.nvim_set_hl(0, 'user3', { bg = '#99CC99', fg = '#FFFFFF' })
vim.api.nvim_set_hl(0, 'BlinkCmpDocCursorLine', { bg = 'none', fg = 'none', link = "Visual" })
vim.api.nvim_set_hl(0, 'BlinkCmpDocSeparator', { bg = 'none', fg = 'none', link = "NormalFloat" })
vim.api.nvim_set_hl(0, 'BlinkCmpDocBorder', { bg = 'none', fg = 'none', link = "NormalFloat" })
vim.api.nvim_set_hl(0, 'BlinkCmpDoc', { bg = 'none', fg = 'none', link = "NormalFloat" })
vim.api.nvim_set_hl(0, 'BlinkCmpMenuSelection', { bg = 'none', fg = 'none', link = "PmenuSel" })
vim.api.nvim_set_hl(0, 'BlinkCmpMenuBorder', { bg = 'none', fg = 'none', link = "Pmenu" })
vim.api.nvim_set_hl(0, 'visuallinemode', { bg = '#5F89AD', fg = 'none' })
vim.api.nvim_set_hl(0, 'BlinkCmpMenu', { bg = 'none', fg = 'none', link = "Pmenu" })
vim.api.nvim_set_hl(0, 'visualmode', { bg = '#5F89AD', fg = 'none' })
vim.api.nvim_set_hl(0, 'BlinkCmpGhostText', { bg = 'none', fg = 'none', link = "NonText" })
vim.api.nvim_set_hl(0, 'qffilename', { bg = 'none', fg = '#F8FE7A' })
vim.api.nvim_set_hl(0, 'BlinkCmpScrollBarGutter', { bg = 'none', fg = 'none', link = "PmenuSbar" })
vim.api.nvim_set_hl(0, 'BlinkCmpScrollBarThumb', { bg = 'none', fg = 'none', link = "PmenuThumb" })
vim.api.nvim_set_hl(0, 'BlinkCmpKindFolder', { bg = 'none', fg = 'none', link = "BlinkCmpKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpKind', { bg = 'none', fg = 'none', link = "PmenuKind" })
vim.api.nvim_set_hl(0, 'BlinkCmpSource', { bg = 'none', fg = 'none', link = "PmenuExtra" })
vim.api.nvim_set_hl(0, 'BlinkCmpLabelDescription', { bg = 'none', fg = 'none', link = "PmenuExtra" })
vim.api.nvim_set_hl(0, 'BlinkCmpLabelDetail', { bg = 'none', fg = 'none', link = "PmenuExtra" })
vim.api.nvim_set_hl(0, 'BlinkCmpLabelDeprecated', { bg = 'none', fg = 'none', link = "PmenuExtra" })
vim.api.nvim_set_hl(0, 'FzfLuaFzfQuery', { bg = 'none', fg = 'none', link = "FzfLuaNormal" })
vim.api.nvim_set_hl(0, '@lsp.type.struct', { bg = 'none', fg = 'none', link = "@type" })
vim.api.nvim_set_hl(0, '@lsp.mod.deprecated', { bg = 'none', fg = 'none', link = "DiagnosticDeprecated" })
vim.api.nvim_set_hl(0, 'FloatShadow', { bg = '#4F5258', fg = 'none' })
vim.api.nvim_set_hl(0, 'MatchParen', { bg = 'none', fg = '#8ABEB7' })
vim.api.nvim_set_hl(0, 'RedrawDebugComposed', { bg = '#005523', fg = 'none' })
vim.api.nvim_set_hl(0, 'Added', { bg = 'none', fg = '#B3F6C0' })
vim.api.nvim_set_hl(0, 'DiagnosticUnderlineInfo', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, 'DiagnosticUnderlineOk', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, 'NvimPlainAssignment', { bg = 'none', fg = 'none', link = "NvimAssignment" })
vim.api.nvim_set_hl(0, 'NvimNot', { bg = 'none', fg = 'none', link = "NvimUnaryOperator" })
vim.api.nvim_set_hl(0, 'NvimBinaryMinus', { bg = 'none', fg = 'none', link = "NvimBinaryOperator" })
vim.api.nvim_set_hl(0, 'NvimSubscriptColon', { bg = 'none', fg = 'none', link = "NvimSubscript" })
vim.api.nvim_set_hl(0, 'FzfLuaFzfNormal', { bg = 'none', fg = 'none', link = "FzfLuaNormal" })
vim.api.nvim_set_hl(0, 'FzfLuaTabMarker', { bg = 'none', fg = '#FFEBCD' })
vim.api.nvim_set_hl(0, 'NvimStringSpecial', { bg = 'none', fg = 'none', link = "SpecialChar" })
vim.api.nvim_set_hl(0, 'NvimInvalidSingleQuotedUnknownEscape', { bg = 'none', fg = 'none', link = "NvimInternalError" })
vim.api.nvim_set_hl(0, 'NvimInvalidAssignmentWithSubtraction',
    { bg = 'none', fg = 'none', link = "NvimInvalidAugmentedAssignment" })
vim.api.nvim_set_hl(0, 'commandmode', { bg = '#99CC99', fg = '#FFFFFF' })
vim.api.nvim_set_hl(0, 'helpignore', { bg = 'none', fg = '#99CC99' })
vim.api.nvim_set_hl(0, 'normalmode', { bg = '#CC6666', fg = '#FFFFFF' })
vim.api.nvim_set_hl(0, 'gitdiff', { bg = 'none', fg = '#C7C7C7' })
vim.api.nvim_set_hl(0, 'diffadded', { bg = 'none', fg = '#99CC99' })
vim.api.nvim_set_hl(0, 'mkdlinebreak', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, '@character.special', { bg = 'none', fg = '#CC6666' })
vim.api.nvim_set_hl(0, 'NvimOptionScopeDelimiter', { bg = 'none', fg = 'none', link = "NvimIdentifierScopeDelimiter" })
vim.api.nvim_set_hl(0, 'FzfLuaHeaderText', { bg = 'none', fg = '#FF4040' })
vim.api.nvim_set_hl(0, 'FzfLuaHeaderBind', { bg = 'none', fg = '#FFEBCD' })
vim.api.nvim_set_hl(0, 'FzfLuaFilePart', { bg = 'none', fg = 'none', link = "@none" })
vim.api.nvim_set_hl(0, 'FzfLuaDirPart', { bg = 'none', fg = 'none', link = "Comment" })
vim.api.nvim_set_hl(0, 'FzfLuaDirIcon', { bg = 'none', fg = 'none', link = "Directory" })
vim.api.nvim_set_hl(0, 'FzfLuaScrollFloatFull', { bg = 'none', fg = 'none', link = "PmenuThumb" })
vim.api.nvim_set_hl(0, 'FzfLuaScrollFloatEmpty', { bg = 'none', fg = 'none', link = "PmenuSbar" })
vim.api.nvim_set_hl(0, 'FzfLuaScrollBorderFull', { bg = 'none', fg = 'none', link = "FzfLuaBorder" })
vim.api.nvim_set_hl(0, 'FzfLuaScrollBorderEmpty', { bg = 'none', fg = 'none', link = "FzfLuaBorder" })
vim.api.nvim_set_hl(0, 'FzfLuaSearch', { bg = 'none', fg = 'none', link = "IncSearch" })
vim.api.nvim_set_hl(0, 'FzfLuaCursorLineNr', { bg = 'none', fg = 'none', link = "CursorLineNr" })
vim.api.nvim_set_hl(0, 'FzfLuaCursorLine', { bg = 'none', fg = 'none', link = "CursorLine" })
vim.api.nvim_set_hl(0, 'LspInlayHint', { bg = 'none', fg = 'none', link = "NonText" })
vim.api.nvim_set_hl(0, 'FzfLuaCursor', { bg = 'none', fg = 'none', link = "Cursor" })
vim.api.nvim_set_hl(0, 'FzfLuaPreviewTitle', { bg = 'none', fg = 'none', link = "FzfLuaTitle" })
vim.api.nvim_set_hl(0, 'FzfLuaPreviewBorder', { bg = 'none', fg = 'none', link = "FzfLuaBorder" })
vim.api.nvim_set_hl(0, 'FzfLuaPreviewNormal', { bg = 'none', fg = 'none', link = "FzfLuaNormal" })
vim.api.nvim_set_hl(0, 'variable', { bg = 'none', fg = '#E0E0E0' })
vim.api.nvim_set_hl(0, 'Constant', { bg = 'none', fg = '#DE935F' })
vim.api.nvim_set_hl(0, 'FzfLuaHelpBorder', { bg = 'none', fg = 'none', link = "FzfLuaBorder" })
vim.api.nvim_set_hl(0, 'FzfLuaHelpNormal', { bg = 'none', fg = 'none', link = "FzfLuaNormal" })
vim.api.nvim_set_hl(0, '@module', { bg = 'none', fg = '#B294BB' })
vim.api.nvim_set_hl(0, 'FzfLuaBackdrop', { bg = '#000000', fg = 'none' })
vim.api.nvim_set_hl(0, 'FzfLuaTitleFlags', { bg = 'none', fg = 'none', link = "CursorLine" })
vim.api.nvim_set_hl(0, '@label', { bg = 'none', fg = '#F8FE7A' })
vim.api.nvim_set_hl(0, 'FzfLuaTitle', { bg = 'none', fg = 'none', link = "FzfLuaNormal" })
vim.api.nvim_set_hl(0, 'FzfLuaBorder', { bg = 'none', fg = 'none', link = "Normal" })
vim.api.nvim_set_hl(0, 'Keyword', { bg = 'none', fg = '#B294BB' })
vim.api.nvim_set_hl(0, 'FzfLuaNormal', { bg = 'none', fg = 'none', link = "Normal" })
vim.api.nvim_set_hl(0, 'Boolean', { bg = 'none', fg = '#DE935F' })
vim.api.nvim_set_hl(0, '@boolean', { bg = 'none', fg = '#DE935F' })
vim.api.nvim_set_hl(0, 'Number', { bg = 'none', fg = '#CC6666' })
vim.api.nvim_set_hl(0, '@number', { bg = 'none', fg = '#CC6666' })
vim.api.nvim_set_hl(0, '@function.call.lua', { bg = 'none', fg = '#5F89AD' })
vim.api.nvim_set_hl(0, '@keyword.faded', { bg = 'none', fg = '#666D78' })
vim.api.nvim_set_hl(0, '@type', { bg = 'none', fg = '#B294BB' })
vim.api.nvim_set_hl(0, '@type.builtin', { bg = 'none', fg = '#B294BB' })
vim.api.nvim_set_hl(0, 'Function', { bg = 'none', fg = '#F8FE7A' })
vim.api.nvim_set_hl(0, '@function.bracket', { bg = '#111111', fg = '#E0E0E0' })
vim.api.nvim_set_hl(0, 'FzfLuaPathColNr', { bg = 'none', fg = '#98F5FF' })
vim.api.nvim_set_hl(0, 'NvimEnvironmentSigil', { bg = 'none', fg = 'none', link = "NvimOptionSigil" })
vim.api.nvim_set_hl(0, 'NvimEnvironmentName', { bg = 'none', fg = 'none', link = "NvimIdentifier" })
vim.api.nvim_set_hl(0, 'DiagnosticUnnecessary', { bg = 'none', fg = 'none', link = "Comment" })
vim.api.nvim_set_hl(0, 'FzfLuaPathLineNr', { bg = 'none', fg = '#90EE90' })
vim.api.nvim_set_hl(0, 'Changed', { bg = 'none', fg = '#8CF8F7' })
vim.api.nvim_set_hl(0, 'markdownh1', { bg = 'none', fg = '#81A2BE' })
vim.api.nvim_set_hl(0, 'FzfLuaLivePrompt', { bg = 'none', fg = '#FF82AB' })
vim.api.nvim_set_hl(0, 'String', { bg = 'none', fg = '#99CC99' })
vim.api.nvim_set_hl(0, 'NvimFigureBrace', { bg = 'none', fg = 'none', link = "NvimInternalError" })
vim.api.nvim_set_hl(0, 'FzfLuaLiveSym', { bg = 'none', fg = '#FF82AB' })
vim.api.nvim_set_hl(0, 'diffremoved', { bg = 'none', fg = '#CC6666' })
vim.api.nvim_set_hl(0, 'FzfLuaBufId', { bg = 'none', fg = 'none', link = "TabLine" })
vim.api.nvim_set_hl(0, 'TabLine', { bg = '#282A2E', fg = '#5F89AD' })
vim.api.nvim_set_hl(0, 'FzfLuaBufName', { bg = 'none', fg = 'none', link = "Directory" })
vim.api.nvim_set_hl(0, 'insertmode', { bg = '#F8FE7A', fg = '#FFFFFF' })
vim.api.nvim_set_hl(0, 'FzfLuaBufLineNr', { bg = 'none', fg = 'none', link = "LineNr" })
vim.api.nvim_set_hl(0, 'helpdoc', { bg = '#698B69', fg = '#FFFFFF' })
vim.api.nvim_set_hl(0, 'LineNr', { bg = '#282c34', fg = '#969896' })
vim.api.nvim_set_hl(0, 'FzfLuaBufNr', { bg = 'none', fg = '#FFEBCD' })
vim.api.nvim_set_hl(0, 'invnormal', { bg = '#C5C8C6', fg = '#111111' })
vim.api.nvim_set_hl(0, 'NvimInvalidOptionScopeDelimiter',
    { bg = 'none', fg = 'none', link = "NvimInvalidIdentifierScopeDelimiter" })
vim.api.nvim_set_hl(0, 'FzfLuaBufFlagCur', { bg = 'none', fg = '#FF4040' })
vim.api.nvim_set_hl(0, 'NvimInvalidPlainAssignment', { bg = 'none', fg = 'none', link = "NvimInvalidAssignment" })
vim.api.nvim_set_hl(0, 'FzfLuaBufFlagAlt', { bg = 'none', fg = '#98F5FF' })
vim.api.nvim_set_hl(0, 'htmlh1', { bg = 'none', fg = '#81A2BE' })
vim.api.nvim_set_hl(0, 'FzfLuaTabTitle', { bg = 'none', fg = '#B0E2FF' })
vim.api.nvim_set_hl(0, 'NvimStringBody', { bg = 'none', fg = 'none', link = "NvimString" })
vim.api.nvim_set_hl(0, 'NvimString', { bg = 'none', fg = 'none', link = "String" })
vim.api.nvim_set_hl(0, '@normal', { bg = '#111111', fg = '#E0E0E0' })
vim.api.nvim_set_hl(0, '@tag.attribute.html', { bg = 'none', fg = '#B294BB' })
vim.api.nvim_set_hl(0, '@tag.delimiter.html', { bg = 'none', fg = '#A3BBCF' })
vim.api.nvim_set_hl(0, 'NvimIdentifier', { bg = 'none', fg = 'none', link = "Identifier" })
vim.api.nvim_set_hl(0, 'FzfLuaFzfCursorLine', { bg = 'none', fg = 'none', link = "FzfLuaCursorLine" })
vim.api.nvim_set_hl(0, 'NvimAnd', { bg = 'none', fg = 'none', link = "NvimBinaryOperator" })
vim.api.nvim_set_hl(0, 'FzfLuaFzfMatch', { bg = 'none', fg = 'none', link = "Special" })
vim.api.nvim_set_hl(0, 'Operator', { bg = 'none', fg = '#E6B3B3' })
vim.api.nvim_set_hl(0, 'Special', { bg = 'none', fg = '#A992CD' })
vim.api.nvim_set_hl(0, 'FzfLuaFzfBorder', { bg = 'none', fg = 'none', link = "FzfLuaBorder" })
vim.api.nvim_set_hl(0, 'NvimUnaryOperator', { bg = 'none', fg = 'none', link = "NvimOperator" })
vim.api.nvim_set_hl(0, 'FzfLuaFzfScrollbar', { bg = 'none', fg = 'none', link = "FzfLuaFzfBorder" })
vim.api.nvim_set_hl(0, 'NvimInternalError', { bg = '#FF0000', fg = '#FF0000' })
vim.api.nvim_set_hl(0, 'FzfLuaFzfSeparator', { bg = 'none', fg = 'none', link = "FzfLuaFzfBorder" })
vim.api.nvim_set_hl(0, 'DiagnosticUnderlineHint', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, 'FzfLuaFzfGutter', { bg = 'none', fg = 'none', link = "FzfLuaNormal" })
vim.api.nvim_set_hl(0, 'DiagnosticUnderlineWarn', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, 'FzfLuaFzfHeader', { bg = 'none', fg = 'none', link = "FzfLuaTitle" })
vim.api.nvim_set_hl(0, 'RedrawDebugRecompose', { bg = '#590008', fg = 'none' })
vim.api.nvim_set_hl(0, 'FzfLuaFzfInfo', { bg = 'none', fg = 'none', link = "NonText" })
vim.api.nvim_set_hl(0, 'RedrawDebugClear', { bg = '#6B5300', fg = 'none' })
vim.api.nvim_set_hl(0, 'NonText', { bg = 'none', fg = '#4E545D' })
vim.api.nvim_set_hl(0, 'FzfLuaFzfPointer', { bg = 'none', fg = 'none', link = "Special" })
vim.api.nvim_set_hl(0, 'FloatShadowThrough', { bg = '#4F5258', fg = 'none' })
vim.api.nvim_set_hl(0, 'FzfLuaFzfMarker', { bg = 'none', fg = 'none', link = "FzfLuaFzfPointer" })
vim.api.nvim_set_hl(0, 'Error', { bg = 'none', fg = '#D98C8C' })
vim.api.nvim_set_hl(0, 'FzfLuaFzfSpinner', { bg = 'none', fg = 'none', link = "FzfLuaFzfPointer" })
vim.api.nvim_set_hl(0, '@lsp.type.type', { bg = 'none', fg = 'none', link = "@type" })
vim.api.nvim_set_hl(0, 'FzfLuaFzfPrompt', { bg = 'none', fg = 'none', link = "Special" })
vim.api.nvim_set_hl(0, '@lsp.type.comment', { bg = 'none', fg = 'none', link = "@comment" })
vim.api.nvim_set_hl(0, 'SpecialKey', { bg = 'none', fg = '#4F5258' })
vim.api.nvim_set_hl(0, 'EndOfBuffer', { bg = 'none', fg = '#969896' })
vim.api.nvim_set_hl(0, 'TermCursor', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, 'ErrorMsg', { bg = 'none', fg = '#FFC0B9' })
vim.api.nvim_set_hl(0, 'CurSearch', { bg = '#FCE094', fg = '#07080D' })
vim.api.nvim_set_hl(0, 'Search', { bg = '#F8FE7A', fg = '#282A2E' })
vim.api.nvim_set_hl(0, 'MoreMsg', { bg = 'none', fg = '#8CF8F7' })
vim.api.nvim_set_hl(0, 'ModeMsg', { bg = 'none', fg = '#B3F6C0' })
vim.api.nvim_set_hl(0, 'LineNrAbove', { bg = 'none', fg = 'none', link = "LineNr" })
vim.api.nvim_set_hl(0, 'LineNrBelow', { bg = 'none', fg = 'none', link = "LineNr" })
vim.api.nvim_set_hl(0, 'CursorLineSign', { bg = 'none', fg = 'none', link = "SignColumn" })
vim.api.nvim_set_hl(0, 'SignColumn', { link = 'LineNr' })
vim.api.nvim_set_hl(0, 'CursorLineFold', { bg = 'none', fg = 'none', link = "FoldColumn" })
vim.api.nvim_set_hl(0, 'FoldColumn', { bg = 'none', fg = 'none', link = "SignColumn" })
vim.api.nvim_set_hl(0, 'Question', { bg = 'none', fg = '#8CF8F7' })
vim.api.nvim_set_hl(0, 'StatusLine', { bg = '#81A2BE', fg = '#373B41' })
vim.api.nvim_set_hl(0, 'StatusLineNC', { bg = '#404349', fg = '#969896' })
vim.api.nvim_set_hl(0, 'WinSeparator', { bg = 'none', fg = 'none', link = "Normal" })
vim.api.nvim_set_hl(0, 'VertSplit', { bg = 'none', fg = 'none', link = "WinSeparator" })
vim.api.nvim_set_hl(0, 'Title', { bg = 'none', fg = '#E0E2EA' })
vim.api.nvim_set_hl(0, 'WildMenu', { bg = 'none', fg = 'none', link = "PmenuSel" })
vim.api.nvim_set_hl(0, 'Folded', { bg = '#4E545D', fg = '#7C7F7C' })
vim.api.nvim_set_hl(0, 'DiffAdd', { bg = '#33423E', fg = 'none' })
vim.api.nvim_set_hl(0, 'DiffChange', { bg = '#33423E', fg = 'none' })
vim.api.nvim_set_hl(0, 'DiffDelete', { bg = '#24282F', fg = '#3A414C' })
vim.api.nvim_set_hl(0, 'DiffText', { bg = '#3E4A47', fg = 'none' })
vim.api.nvim_set_hl(0, 'DiffTextAdd', { bg = 'none', fg = 'none', link = "DiffText" })
vim.api.nvim_set_hl(0, 'Conceal', { bg = '#4E545D', fg = '#111111' })
vim.api.nvim_set_hl(0, 'SpellBad', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, 'SpellCap', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, 'SpellRare', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, 'SpellLocal', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, 'WarningMsg', { bg = 'none', fg = '#FCE094' })
vim.api.nvim_set_hl(0, 'PmenuMatchSel', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, 'PmenuKindSel', { bg = 'none', fg = 'none', link = "PmenuSel" })
vim.api.nvim_set_hl(0, 'PmenuExtraSel', { bg = 'none', fg = 'none', link = "PmenuSel" })
vim.api.nvim_set_hl(0, 'TabLineSel', { bg = '#282A2E', fg = '#FFFFFF' })
vim.api.nvim_set_hl(0, 'TabLineFill', { bg = '#969896', fg = '#EBDBB2' })
vim.api.nvim_set_hl(0, 'CursorColumn', { bg = '#2C2E33', fg = 'none' })
vim.api.nvim_set_hl(0, 'ColorColumn', { bg = '#4F5258', fg = 'none' })
vim.api.nvim_set_hl(0, 'QuickFixLine', { bg = 'none', fg = '#8CF8F7' })
vim.api.nvim_set_hl(0, 'Whitespace', { bg = 'none', fg = '#8E6FBD' })
vim.api.nvim_set_hl(0, 'NormalNC', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, 'MsgSeparator', { bg = 'none', fg = 'none', link = "StatusLine" })
vim.api.nvim_set_hl(0, 'MsgArea', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, 'WinBar', { bg = '#07080D', fg = '#9B9EA4' })
vim.api.nvim_set_hl(0, 'WinBarNC', { bg = '#07080D', fg = '#9B9EA4' })
vim.api.nvim_set_hl(0, 'FloatTitle', { bg = 'none', fg = 'none', link = "Title" })
vim.api.nvim_set_hl(0, 'FloatFooter', { bg = 'none', fg = 'none', link = "FloatTitle" })
vim.api.nvim_set_hl(0, 'StatusLineTerm', { bg = 'none', fg = 'none', link = "StatusLine" })
vim.api.nvim_set_hl(0, 'StatusLineTermNC', { bg = 'none', fg = 'none', link = "StatusLineNC" })
vim.api.nvim_set_hl(0, 'RedrawDebugNormal', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, 'Underlined', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, 'lCursor', { bg = '#E0E0E0', fg = '#111111' })
vim.api.nvim_set_hl(0, 'CursorIM', { bg = 'none', fg = 'none', link = "Cursor" })
vim.api.nvim_set_hl(0, 'ComplMatchIns', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, 'Substitute', { bg = 'none', fg = 'none', link = "Search" })
vim.api.nvim_set_hl(0, 'VisualNOS', { bg = 'none', fg = 'none', link = "Visual" })
vim.api.nvim_set_hl(0, 'Character', { bg = 'none', fg = '#CC6666' })
vim.api.nvim_set_hl(0, 'Float', { bg = 'none', fg = '#CC6666' })
vim.api.nvim_set_hl(0, 'Conditional', { bg = 'none', fg = '#B294BB' })
vim.api.nvim_set_hl(0, 'Repeat', { bg = 'none', fg = '#CC6666' })
vim.api.nvim_set_hl(0, 'Label', { bg = 'none', fg = '#F8FE7A' })
vim.api.nvim_set_hl(0, 'Exception', { bg = 'none', fg = 'none', link = "Statement" })
vim.api.nvim_set_hl(0, 'Statement', { bg = 'none', fg = '#BF4040' })
vim.api.nvim_set_hl(0, 'NormalFloat', { link = 'Normal' })
vim.api.nvim_set_hl(0, 'FloatBorder', { link = 'Normal' })
vim.api.nvim_set_hl(0, 'Macro', { bg = 'none', fg = 'none', link = "PreProc" })
vim.api.nvim_set_hl(0, 'PreCondit', { bg = 'none', fg = 'none', link = "PreProc" })
vim.api.nvim_set_hl(0, 'StorageClass', { bg = 'none', fg = '#F8FE7A' })
vim.api.nvim_set_hl(0, 'Structure', { bg = 'none', fg = '#B294BB' })
vim.api.nvim_set_hl(0, 'Typedef', { bg = 'none', fg = '#F8FE7A' })
vim.api.nvim_set_hl(0, 'Tag', { bg = 'none', fg = '#F8FE7A' })
vim.api.nvim_set_hl(0, 'SpecialChar', { bg = 'none', fg = '#A3685A' })
vim.api.nvim_set_hl(0, 'SpecialComment', { bg = 'none', fg = 'none', link = "Special" })
vim.api.nvim_set_hl(0, 'Ignore', { bg = 'none', fg = 'none', link = "Normal" })
vim.api.nvim_set_hl(0, 'LspCodeLens', { bg = 'none', fg = 'none', link = "NonText" })
vim.api.nvim_set_hl(0, 'LspCodeLensSeparator', { bg = 'none', fg = 'none', link = "LspCodeLens" })
vim.api.nvim_set_hl(0, 'DiagnosticError', { bg = 'none', fg = '#CC6666' })
vim.api.nvim_set_hl(0, 'DiagnosticWarn', { bg = 'none', fg = '#FCE094' })
vim.api.nvim_set_hl(0, 'DiagnosticInfo', { bg = 'none', fg = '#8CF8F7' })
vim.api.nvim_set_hl(0, 'DiagnosticHint', { bg = 'none', fg = '#A6DBFF' })
vim.api.nvim_set_hl(0, 'DiagnosticFloatingOk', { bg = 'none', fg = 'none', link = "DiagnosticOk" })
vim.api.nvim_set_hl(0, 'DiagnosticOk', { bg = 'none', fg = '#B3F6C0' })
vim.api.nvim_set_hl(0, 'DiagnosticVirtualTextOk', { bg = 'none', fg = 'none', link = "DiagnosticOk" })
vim.api.nvim_set_hl(0, 'DiagnosticVirtualLinesOk', { bg = 'none', fg = 'none', link = "DiagnosticOk" })
vim.api.nvim_set_hl(0, 'DiagnosticSignOk', { bg = 'none', fg = 'none', link = "DiagnosticOk" })
vim.api.nvim_set_hl(0, '@variable.parameter.builtin', { bg = 'none', fg = 'none', link = "Special" })
vim.api.nvim_set_hl(0, '@constant.builtin', { bg = 'none', fg = 'none', link = "Special" })
vim.api.nvim_set_hl(0, '@module.builtin', { bg = 'none', fg = 'none', link = "Special" })
vim.api.nvim_set_hl(0, '@string', { bg = 'none', fg = 'none', link = "String" })
vim.api.nvim_set_hl(0, '@string.regexp', { bg = 'none', fg = 'none', link = "@string.special" })
vim.api.nvim_set_hl(0, 'LspReferenceTarget', { bg = 'none', fg = 'none', link = "LspReferenceText" })
vim.api.nvim_set_hl(0, '@string.escape', { bg = 'none', fg = 'none', link = "@string.special" })
vim.api.nvim_set_hl(0, '@string.special.url', { bg = 'none', fg = 'none', link = "Underlined" })
vim.api.nvim_set_hl(0, '@character', { bg = 'none', fg = 'none', link = "Character" })
vim.api.nvim_set_hl(0, '@number.float', { bg = 'none', fg = 'none', link = "Float" })
vim.api.nvim_set_hl(0, '@attribute', { bg = 'none', fg = 'none', link = "Macro" })
vim.api.nvim_set_hl(0, '@attribute.builtin', { bg = 'none', fg = 'none', link = "Special" })
vim.api.nvim_set_hl(0, '@function.builtin', { bg = 'none', fg = 'none', link = "Special" })
vim.api.nvim_set_hl(0, '@constructor', { bg = 'none', fg = 'none', link = "Special" })
vim.api.nvim_set_hl(0, '@operator', { bg = 'none', fg = 'none', link = "Operator" })
vim.api.nvim_set_hl(0, '@punctuation', { bg = 'none', fg = 'none', link = "Delimiter" })
vim.api.nvim_set_hl(0, 'Delimiter', { bg = 'none', fg = '#E0E2EA' })
vim.api.nvim_set_hl(0, '@punctuation.special', { bg = 'none', fg = 'none', link = "Special" })
vim.api.nvim_set_hl(0, '@comment', { bg = 'none', fg = 'none', link = "Comment" })
vim.api.nvim_set_hl(0, '@comment.error', { bg = 'none', fg = 'none', link = "DiagnosticError" })
vim.api.nvim_set_hl(0, '@comment.warning', { bg = 'none', fg = 'none', link = "DiagnosticWarn" })
vim.api.nvim_set_hl(0, '@comment.note', { bg = 'none', fg = 'none', link = "DiagnosticInfo" })
vim.api.nvim_set_hl(0, '@comment.todo', { bg = 'none', fg = 'none', link = "Todo" })
vim.api.nvim_set_hl(0, 'Todo', { bg = 'none', fg = '#F8FE7A' })
vim.api.nvim_set_hl(0, '@markup', { bg = 'none', fg = 'none', link = "Special" })
vim.api.nvim_set_hl(0, '@lsp.type.function', { bg = 'none', fg = 'none', link = "@function" })
vim.api.nvim_set_hl(0, '@lsp.type.interface', { bg = 'none', fg = 'none', link = "@type" })
vim.api.nvim_set_hl(0, '@lsp.type.keyword', { bg = 'none', fg = 'none', link = "@keyword" })
vim.api.nvim_set_hl(0, '@lsp.type.macro', { bg = 'none', fg = 'none', link = "@constant.macro" })
vim.api.nvim_set_hl(0, '@lsp.type.decorator', { bg = 'none', fg = 'none', link = "@attribute" })
vim.api.nvim_set_hl(0, '@lsp.type.method', { bg = 'none', fg = 'none', link = "@function.method" })
vim.api.nvim_set_hl(0, '@lsp.type.enum', { bg = 'none', fg = 'none', link = "@type" })
vim.api.nvim_set_hl(0, '@lsp.type.modifier', { bg = 'none', fg = 'none', link = "@type.qualifier" })
vim.api.nvim_set_hl(0, '@lsp.type.event', { bg = 'none', fg = 'none', link = "@type" })
vim.api.nvim_set_hl(0, '@lsp.type.namespace', { bg = 'none', fg = 'none', link = "@module" })
vim.api.nvim_set_hl(0, '@lsp.type.number', { bg = 'none', fg = 'none', link = "@number" })
vim.api.nvim_set_hl(0, '@lsp.type.operator', { bg = 'none', fg = 'none', link = "@operator" })
vim.api.nvim_set_hl(0, '@lsp.type.parameter', { bg = 'none', fg = 'none', link = "@variable.parameter" })
vim.api.nvim_set_hl(0, '@lsp.type.enumMember', { bg = 'none', fg = 'none', link = "@constant" })
vim.api.nvim_set_hl(0, '@lsp.type.property', { bg = 'none', fg = 'none', link = "@property" })
vim.api.nvim_set_hl(0, '@lsp.type.regexp', { bg = 'none', fg = 'none', link = "@string.regexp" })
vim.api.nvim_set_hl(0, '@lsp.type.string', { bg = 'none', fg = 'none', link = "@string" })
vim.api.nvim_set_hl(0, '@lsp.type.class', { bg = 'none', fg = 'none', link = "@type" })
vim.api.nvim_set_hl(0, '@markup.heading.2.delimiter.vimdoc', { bg = '#111111', fg = '#111111' })
vim.api.nvim_set_hl(0, '@markup.heading.1.delimiter.vimdoc', { bg = '#111111', fg = '#111111' })
vim.api.nvim_set_hl(0, '@tag.builtin', { bg = 'none', fg = 'none', link = "Special" })
vim.api.nvim_set_hl(0, '@tag', { bg = 'none', fg = 'none', link = "Tag" })
vim.api.nvim_set_hl(0, '@diff.delta', { bg = 'none', fg = 'none', link = "Changed" })
vim.api.nvim_set_hl(0, 'Removed', { bg = 'none', fg = '#FFC0B9' })
vim.api.nvim_set_hl(0, '@diff.minus', { bg = 'none', fg = 'none', link = "Removed" })
vim.api.nvim_set_hl(0, 'DiagnosticDeprecated', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, '@diff.plus', { bg = 'none', fg = 'none', link = "Added" })
vim.api.nvim_set_hl(0, '@markup.link', { bg = 'none', fg = 'none', link = "Underlined" })
vim.api.nvim_set_hl(0, '@markup.heading', { bg = 'none', fg = 'none', link = "Title" })
vim.api.nvim_set_hl(0, '@markup.underline', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, '@markup.strikethrough', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, '@markup.italic', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, '@markup.strong', { bg = 'none', fg = 'none' })
vim.api.nvim_set_hl(0, '@keyword', { bg = 'none', fg = '#B294BB' })
vim.api.nvim_set_hl(0, '@function', { bg = 'none', fg = '#F8FE7A' })
vim.api.nvim_set_hl(0, 'Identifier', { bg = 'none', fg = '#E0E0E0' })
vim.api.nvim_set_hl(0, 'markdownh2', { bg = 'none', fg = '#A3BBCF' })
vim.api.nvim_set_hl(0, '@string.special', { bg = 'none', fg = 'none', link = "SpecialChar" })
vim.api.nvim_set_hl(0, '@variable.builtin', { bg = '#111111', fg = '#C5B5DD' })
vim.api.nvim_set_hl(0, '@variable', { bg = 'none', fg = '#E0E0E0' })
vim.api.nvim_set_hl(0, 'markdownh3', { bg = 'none', fg = '#C4D4E1' })
vim.api.nvim_set_hl(0, 'DiagnosticSignError', { bg = 'none', fg = 'none', link = "DiagnosticError" })
vim.api.nvim_set_hl(0, 'DiagnosticVirtualTextHint', { bg = 'none', fg = 'none', link = "DiagnosticHint" })
vim.api.nvim_set_hl(0, 'Type', { bg = 'none', fg = '#B294BB' })
vim.api.nvim_set_hl(0, 'Define', { bg = 'none', fg = '#8ABEB7' })
vim.api.nvim_set_hl(0, 'PreProc', { bg = 'none', fg = '#F8FE7A' })
vim.api.nvim_set_hl(0, 'Include', { bg = 'none', fg = '#8ABEB7' })
vim.api.nvim_set_hl(0, 'PmenuMatch', { bg = 'none', fg = 'none' })
